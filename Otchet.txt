# !pip install pyTelegramBotAPI
# !pip install git+https://github.com/openai/whisper.git
# !pip install pydub
# !apt-get install -y ffmpeg
# !pip install numpy scipy
# !pip install noisereduce
# !python -m spacy download en_core_web_sm
# !python -m spacy download ru_core_news_md
# !python -m spacy download ru_core_news_sm
# !pip install transformers torch
# !pip install openai

import os
import telebot
import torch
from pydub import AudioSegment
import whisper
import noisereduce as nr
import soundfile as sf
import spacy
import re

# Подключаем Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Указываем путь к папке на Google Drive
DOWNLOAD_FOLDER = '/content/drive/My Drive/downloadsoundfiles'

API_TOKEN = '7654467470:AAG8Zqs0HpG5eAy4Id83-_Z3n3CduhkiPK0'
bot = telebot.TeleBot(API_TOKEN)

# Загружаем модель Whisper
model = whisper.load_model("medium")  # tiny, base, small, medium, large

# Загружаем модель spaCy для извлечения именованных сущностей
nlp = spacy.load("ru_core_news_sm")

# Переменная для хранения пользовательского отчёта
user_reports = {}

# Функция для классификации стиля на основе ключевых слов
def classify_style_keywords(text):
    informal_keywords = ['привет', 'как дела', 'окей', 'чувак', 'пацан', 'супер', 'эмодзи', 'плиз', 'лул']
    formal_keywords = ['уважаемый', 'с уважением', 'официально', 'пожалуйста', 'серьезно', 'уверены', 'необходимо', 'собрание']

    informal_count = sum(keyword in text.lower() for keyword in informal_keywords)
    formal_count = sum(keyword in text.lower() for keyword in formal_keywords)

    if informal_count > formal_count:
        return "Неформальный"
    elif formal_count > informal_count:
        return "Официальный"
    else:
        return "Смешанный"

# Функция для классификации приоритета на основе ключевых фраз
def classify_priority_by_keywords(text):
    high_priority_keywords = ['срочно', 'неотложно', 'важно', 'экстренно', 'сейчас', 'сегодня', 'щас', 'вечером', 'обязательно', 'завтра', 'срочный']
    medium_priority_keywords = ['нужно', 'следует', 'желательно', 'неделю', 'неделя']
    low_priority_keywords = ['по возможности', 'если есть время', 'потом', 'когда удобно', 'бы', 'не плохо']

    high_count = sum(keyword in text.lower() for keyword in high_priority_keywords)
    medium_count = sum(keyword in text.lower() for keyword in medium_priority_keywords)
    low_count = sum(keyword in text.lower() for keyword in low_priority_keywords)

    if high_count > medium_count and high_count > low_count:
        return "Высокий"
    elif medium_count > high_count and medium_count > low_count:
        return "Средний"
    else:
        return "Низкий"

# Функция для извлечения имен из текста с помощью spaCy
def extract_names_from_text_spacy(text):
    doc = nlp(text)
    names = [ent.text for ent in doc.ents if ent.label_ == "PER"]
    return names

# Функция для выделения задач на основе ключевых фраз
def extract_tasks(text):
    tasks = []
    task_keywords = [
        ('делает', 'отчет'),
        ('готовит', 'презентацию'),
        ('делает', 'презентацию'),
        ('анализирует', 'данные'),
        ('подготавливает', 'документ'),
        ('пишет', 'отчет'),
        ('занимается', 'проектом'),
        ('отвечает', 'на вопросы'),
        ('провести', 'проверку'),
        ('проводит', 'встречу')
    ]

    for verb, task in task_keywords:
        if verb in text and task in text:
            tasks.append(task)

    return tasks

# Функция для обработки голосовых сообщений
@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    # Получаем файл аудиосообщения
    file_info = bot.get_file(message.voice.file_id)
    file_name = f"{message.voice.file_id}.ogg"

    # Получаем ID пользователя из сообщения
    user_id = message.from_user.id
    print(f"ID пользователя: {user_id}")

    # Скачиваем файл
    downloaded_file = bot.download_file(file_info.file_path)

    # Записываем файл в целевую папку
    file_path = os.path.join(DOWNLOAD_FOLDER, file_name)
    with open(file_path, 'wb') as new_file:
        new_file.write(downloaded_file)

    # Конвертируем ogg в wav
    audio = AudioSegment.from_file(file_path, format='ogg')

    # Сохраняем аудио в формат wav для дальнейшей обработки
    wav_file_path = file_path.replace('.ogg', '.wav')
    audio.export(wav_file_path, format='wav')

    # Применяем шумоподавление с использованием noisereduce
    data, sample_rate = sf.read(wav_file_path)  # Чтение аудио с использованием soundfile
    reduced_noise_data = nr.reduce_noise(y=data, sr=sample_rate)

    # Сохраняем обработанное аудио
    noise_reduced_file_path = wav_file_path.replace('.wav', '_nr.wav')
    sf.write(noise_reduced_file_path, reduced_noise_data, sample_rate)

    # Выполняем транскрипцию с помощью Whisper
    result = model.transcribe(noise_reduced_file_path)
    transcript_text = result["text"]

    # Извлекаем имена из транскрибированного текста
    names = extract_names_from_text_spacy(transcript_text)

    # Извлекаем задачи
    tasks = extract_tasks(transcript_text)

    # Определение стиля текста на основе ключевых слов
    text_style = classify_style_keywords(transcript_text)

    # Определение приоритета текста на основе ключевых слов
    text_priority = classify_priority_by_keywords(transcript_text)

    # Отправляем транскрибированный текст обратно пользователю
    bot.reply_to(message, f"Транскрипция аудиосообщения:\n{transcript_text}")

    # Если имена найдены, отправляем задачи
    if names and tasks:
        for i in range(min(len(names), len(tasks))):
            # Получаем ID пользователя из сообщения
            user_id = message.from_user.id
            print(f"ID пользователя: {user_id}")
            bot.reply_to(message, f"Исполнительное лицо: {names[i]}\nЗадача: {tasks[i]}\n")
    else:
        bot.reply_to(message, f"Не удалось выделить исполнителей или задачи.")

    #Вывод стиля и проирета текста
    bot.reply_to(message, f"Стиль сообщения: {text_style}\nПриоритет: {text_priority}")

    # Удаляем временные файлы, чтобы очистить пространство на диске
    os.remove(file_path)
    os.remove(wav_file_path)
    os.remove(noise_reduced_file_path)

@bot.message_handler(commands=['svyaz'])
def handle_svyaz_command(message):
    # Получаем ID пользователя
    user_id = message.from_user.id
    print(f"ID пользователя: {user_id}")

    # Спрашиваем пользователя о его сообщении для поддержки
    msg = bot.reply_to(message, "Пожалуйста, напишите, какое сообщение вы хотели бы передать поддержке.")

    # Задаем обработчик следующего сообщения для сохранения отзыва
    bot.register_next_step_handler(msg, save_user_report, user_id)

def save_user_report(message, user_id):
    # Сохраняем ответ пользователя в переменной
    userreport = message.text
    user_reports[user_id] = userreport
    bot.reply_to(message, "Ваше сообщение было успешно сохранено и передано поддержке.")

# Запускаем бота
if __name__ == '__main__':
    bot.polling(none_stop=True)

